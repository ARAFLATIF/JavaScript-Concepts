The onclick property in JavaScript is a powerful tool for adding interactivity to web pages by executing a function or script when an element is clicked. Here’s a detailed overview of how to use the onclick property, its syntax, and examples.
Syntax
In HTML
The onclick attribute can be added directly to an HTML element to specify the script or function that should be executed when the element is clicked.

<element onclick="script">Click Here</element>

For example, using a button:

<button onclick="myFunction()">Click Me</button>
<script>
  function myFunction() {
    alert("Button clicked!");
  }
</script>


In JavaScript
You can also set the onclick property using JavaScript. This method allows you to dynamically add or change the click event handler.

<button id="myButton">Click Me</button>
<script>
  document.getElementById("myButton").onclick = function() {
    alert("Button clicked!");
  };
</script>


Using addEventListener
While not directly using the onclick property, you can achieve similar functionality using the addEventListener method, which is often preferred for its flexibility and ability to handle multiple event handlers.

<button id="myButton">Click Me</button>
<script>
  document.getElementById("myButton").addEventListener("click", function() {
    alert("Button clicked!");
  });
</script>


Examples
Displaying Date and Time
Here’s an example where clicking a button displays the current date and time:


<!DOCTYPE html>
<html>
<head>
  <title>HTML onclick Event Attribute</title>
</head>
<body>
  <button onclick="document.getElementById('time').innerHTML = new Date()">Show Date</button>
  <p id="time"></p>
</body>
</html>



Changing Text on Click
When a paragraph is clicked, the text changes:


<!DOCTYPE html>
<html>
<head>
  <title>HTML onclick Event Attribute</title>
</head>
<body>
  <p id="geeks" onclick="onclick_event()">Click Here</p>
  <script>
    function onclick_event() {
      document.getElementById("geeks").innerHTML = "Welcome to GeeksforGeeks!";
    }
  </script>
</body>
</html>


Using Parameters
You can pass parameters to the function called by the onclick event:

<div>
  <p class="name">freeCodeCamp</p>
  <button onclick="changeColor('blue')">Blue</button>
  <button onclick="changeColor('green')">Green</button>
  <button onclick="changeColor('orangered')">Orange</button>
</div>

<script>
  function changeColor(color) {
    document.querySelector(".name").style.color = color;
  }
</script>



Technical Details
Bubbling and Cancelable: The onclick event bubbles up the DOM tree and is cancelable, meaning you can prevent the default action of the element using event.preventDefault()2.
Supported HTML Tags: The onclick attribute can be used with most HTML elements, except for <base>, <bdo>, <br>, <head>, <html>, <iframe>, <meta>, <param>, <script>, <style>, and <title>25.
Best Practices
Separation of Concerns: While inline onclick attributes are easy to use, it's often better to separate your JavaScript code from your HTML using addEventListener for better maintainability and readability4.
Dynamic Addition: Use JavaScript to dynamically add onclick events to elements, especially when you need to handle multiple elements or change event handlers based on conditions3.
In summary, the onclick property is a versatile tool for handling click events in web development. It can be used directly in HTML, set dynamically using JavaScript, or replaced with the more modern addEventListener method for greater flexibility.


  
